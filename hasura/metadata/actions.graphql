type Mutation {
  create_group(
    req: CreateGroupRequest!
  ): CreateGroupResponse
}

type Query {
  find_full_actors(
    req: FindFullActorsRequest!
  ): [FullActor]
}

type Mutation {
  generate_login_challenge(
    req: GenerateLoginChallengeRequest!
  ): GenerateLoginChallengeResponse
}

type Mutation {
  login(
    req: LoginRequest!
  ): LoginResponse
}

input GenerateLoginChallengeRequest {
  address: String!
}

input LoginRequest {
  address: String!
  signature: String!
}

input UpsertOwnedDataRequest {
  id: Int
  name: String!
  description: String!
  type: String!
  cid: String!
  iv: String!
  mac: String!
}

input DeleteOwnedDataRequest {
  id: Int!
}

input ShareRequest {
  to_user_id: uuid!
  original_owned_data_id: Int!
  cid: String!
  iv: String!
  mac: String!
}

input UpdateSharedDataMetadataRequest {
  id: Int!
  name: String!
  description: String!
}

input SoftDeleteOwnedDataRequest {
  id: Int!
}

input UpdateOwnedDataMetadataRequest {
  id: Int!
  name: String!
  description: String!
}

input CreateGroupRequest {
  name: String!
  public_key: String!
  security_data: String!
}

input FindFullActorsRequest {
  actorIds: [uuid!]
}

type GenerateLoginChallengeResponse {
  message: String!
}

type LoginResponse {
  refresh_token: String!
  token: String!
  user: User
}

type User {
  address: String!
  id: uuid!
  publicKey: String!
  privateKey: String!
}

type OwnedData {
  id: Int
  owner_user_id: uuid!
  name: String!
  description: String!
  type: String!
  cid: String!
  original_cid: String!
  started_at: timestamptz!
  ended_at: timestamptz
  iv: String!
  mac: String!
  is_deleted: Boolean!
}

type AffectedRowsResponse {
  affected_rows: Int!
}

type SharedData {
  id: Int!
  from_user_id: uuid!
  to_user_id: uuid!
  original_owned_data_id: Int!
  name: String!
  description: String!
  cid: String!
  shared_at: timestamptz!
  iv: String!
  mac: String!
}

type CreateGroupResponse {
  id: uuid!
}

type PrivateInfo {
  privateKey: String!
}

type FullActor {
  id: uuid!
  name: String
  address: String
  publicKey: String
  privateKey: String
}

